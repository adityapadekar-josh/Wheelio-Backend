// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	user "github.com/adityapadekar-josh/Wheelio-Backend.git/internal/app/user"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// ForgotPassword provides a mock function with given fields: ctx, email
func (_m *Service) ForgotPassword(ctx context.Context, email user.Email) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ForgotPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user.Email) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLoggedInUser provides a mock function with given fields: ctx
func (_m *Service) GetLoggedInUser(ctx context.Context) (user.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLoggedInUser")
	}

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (user.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) user.User); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: ctx, userId
func (_m *Service) GetUserById(ctx context.Context, userId int) (user.User, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (user.User, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) user.User); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: ctx, loginDetails
func (_m *Service) LoginUser(ctx context.Context, loginDetails user.LoginUserRequestBody) (user.AccessToken, error) {
	ret := _m.Called(ctx, loginDetails)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 user.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user.LoginUserRequestBody) (user.AccessToken, error)); ok {
		return rf(ctx, loginDetails)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user.LoginUserRequestBody) user.AccessToken); ok {
		r0 = rf(ctx, loginDetails)
	} else {
		r0 = ret.Get(0).(user.AccessToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, user.LoginUserRequestBody) error); ok {
		r1 = rf(ctx, loginDetails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshAccessToken provides a mock function with given fields: ctx
func (_m *Service) RefreshAccessToken(ctx context.Context) (user.AccessToken, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RefreshAccessToken")
	}

	var r0 user.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (user.AccessToken, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) user.AccessToken); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(user.AccessToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, userDetails
func (_m *Service) RegisterUser(ctx context.Context, userDetails user.CreateUserRequestBody) error {
	ret := _m.Called(ctx, userDetails)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user.CreateUserRequestBody) error); ok {
		r0 = rf(ctx, userDetails)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetPassword provides a mock function with given fields: ctx, resetPasswordDetails
func (_m *Service) ResetPassword(ctx context.Context, resetPasswordDetails user.ResetPasswordRequestBody) error {
	ret := _m.Called(ctx, resetPasswordDetails)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user.ResetPasswordRequestBody) error); ok {
		r0 = rf(ctx, resetPasswordDetails)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpgradeUserRoleToHost provides a mock function with given fields: ctx
func (_m *Service) UpgradeUserRoleToHost(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpgradeUserRoleToHost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyEmail provides a mock function with given fields: ctx, token
func (_m *Service) VerifyEmail(ctx context.Context, token user.Token) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for VerifyEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user.Token) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
