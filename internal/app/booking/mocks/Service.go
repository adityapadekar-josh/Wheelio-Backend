// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	booking "github.com/adityapadekar-josh/Wheelio-Backend.git/internal/app/booking"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CancelBooking provides a mock function with given fields: ctx, bookingId
func (_m *Service) CancelBooking(ctx context.Context, bookingId int) error {
	ret := _m.Called(ctx, bookingId)

	if len(ret) == 0 {
		panic("no return value specified for CancelBooking")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, bookingId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfirmPickup provides a mock function with given fields: ctx, bookingId, otpData
func (_m *Service) ConfirmPickup(ctx context.Context, bookingId int, otpData booking.OtpRequestBody) error {
	ret := _m.Called(ctx, bookingId, otpData)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmPickup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, booking.OtpRequestBody) error); ok {
		r0 = rf(ctx, bookingId, otpData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfirmReturn provides a mock function with given fields: ctx, bookingId, otpData
func (_m *Service) ConfirmReturn(ctx context.Context, bookingId int, otpData booking.OtpRequestBody) error {
	ret := _m.Called(ctx, bookingId, otpData)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmReturn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, booking.OtpRequestBody) error); ok {
		r0 = rf(ctx, bookingId, otpData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBooking provides a mock function with given fields: ctx, bookingData
func (_m *Service) CreateBooking(ctx context.Context, bookingData booking.CreateBookingRequestBody) (booking.Booking, error) {
	ret := _m.Called(ctx, bookingData)

	if len(ret) == 0 {
		panic("no return value specified for CreateBooking")
	}

	var r0 booking.Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, booking.CreateBookingRequestBody) (booking.Booking, error)); ok {
		return rf(ctx, bookingData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, booking.CreateBookingRequestBody) booking.Booking); ok {
		r0 = rf(ctx, bookingData)
	} else {
		r0 = ret.Get(0).(booking.Booking)
	}

	if rf, ok := ret.Get(1).(func(context.Context, booking.CreateBookingRequestBody) error); ok {
		r1 = rf(ctx, bookingData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookingDetailsById provides a mock function with given fields: ctx, bookingId
func (_m *Service) GetBookingDetailsById(ctx context.Context, bookingId int) (booking.BookingDetails, error) {
	ret := _m.Called(ctx, bookingId)

	if len(ret) == 0 {
		panic("no return value specified for GetBookingDetailsById")
	}

	var r0 booking.BookingDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (booking.BookingDetails, error)); ok {
		return rf(ctx, bookingId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) booking.BookingDetails); ok {
		r0 = rf(ctx, bookingId)
	} else {
		r0 = ret.Get(0).(booking.BookingDetails)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, bookingId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostBookings provides a mock function with given fields: ctx, page, limit
func (_m *Service) GetHostBookings(ctx context.Context, page int, limit int) (booking.PaginatedBookingData, error) {
	ret := _m.Called(ctx, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetHostBookings")
	}

	var r0 booking.PaginatedBookingData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (booking.PaginatedBookingData, error)); ok {
		return rf(ctx, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) booking.PaginatedBookingData); ok {
		r0 = rf(ctx, page, limit)
	} else {
		r0 = ret.Get(0).(booking.PaginatedBookingData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSeekerBookings provides a mock function with given fields: ctx, page, limit
func (_m *Service) GetSeekerBookings(ctx context.Context, page int, limit int) (booking.PaginatedBookingData, error) {
	ret := _m.Called(ctx, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetSeekerBookings")
	}

	var r0 booking.PaginatedBookingData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (booking.PaginatedBookingData, error)); ok {
		return rf(ctx, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) booking.PaginatedBookingData); ok {
		r0 = rf(ctx, page, limit)
	} else {
		r0 = ret.Get(0).(booking.PaginatedBookingData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitiateReturn provides a mock function with given fields: ctx, bookingId
func (_m *Service) InitiateReturn(ctx context.Context, bookingId int) error {
	ret := _m.Called(ctx, bookingId)

	if len(ret) == 0 {
		panic("no return value specified for InitiateReturn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, bookingId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
