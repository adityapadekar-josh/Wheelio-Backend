// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	vehicle "github.com/adityapadekar-josh/Wheelio-Backend.git/internal/app/vehicle"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateVehicle provides a mock function with given fields: ctx, vehicleData
func (_m *Service) CreateVehicle(ctx context.Context, vehicleData vehicle.VehicleRequestBody) (vehicle.Vehicle, error) {
	ret := _m.Called(ctx, vehicleData)

	if len(ret) == 0 {
		panic("no return value specified for CreateVehicle")
	}

	var r0 vehicle.Vehicle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, vehicle.VehicleRequestBody) (vehicle.Vehicle, error)); ok {
		return rf(ctx, vehicleData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, vehicle.VehicleRequestBody) vehicle.Vehicle); ok {
		r0 = rf(ctx, vehicleData)
	} else {
		r0 = ret.Get(0).(vehicle.Vehicle)
	}

	if rf, ok := ret.Get(1).(func(context.Context, vehicle.VehicleRequestBody) error); ok {
		r1 = rf(ctx, vehicleData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateSignedVehicleImageUploadURL provides a mock function with given fields: ctx, mimetype
func (_m *Service) GenerateSignedVehicleImageUploadURL(ctx context.Context, mimetype string) (string, string, error) {
	ret := _m.Called(ctx, mimetype)

	if len(ret) == 0 {
		panic("no return value specified for GenerateSignedVehicleImageUploadURL")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, string, error)); ok {
		return rf(ctx, mimetype)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, mimetype)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, mimetype)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, mimetype)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetVehicleById provides a mock function with given fields: ctx, vehicleId
func (_m *Service) GetVehicleById(ctx context.Context, vehicleId int) (vehicle.Vehicle, error) {
	ret := _m.Called(ctx, vehicleId)

	if len(ret) == 0 {
		panic("no return value specified for GetVehicleById")
	}

	var r0 vehicle.Vehicle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (vehicle.Vehicle, error)); ok {
		return rf(ctx, vehicleId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) vehicle.Vehicle); ok {
		r0 = rf(ctx, vehicleId)
	} else {
		r0 = ret.Get(0).(vehicle.Vehicle)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, vehicleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVehicles provides a mock function with given fields: ctx, params
func (_m *Service) GetVehicles(ctx context.Context, params vehicle.GetVehiclesParams) (vehicle.PaginatedVehicleOverview, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetVehicles")
	}

	var r0 vehicle.PaginatedVehicleOverview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, vehicle.GetVehiclesParams) (vehicle.PaginatedVehicleOverview, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, vehicle.GetVehiclesParams) vehicle.PaginatedVehicleOverview); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(vehicle.PaginatedVehicleOverview)
	}

	if rf, ok := ret.Get(1).(func(context.Context, vehicle.GetVehiclesParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVehiclesForHost provides a mock function with given fields: ctx, page, limit
func (_m *Service) GetVehiclesForHost(ctx context.Context, page int, limit int) (vehicle.PaginatedVehicleOverview, error) {
	ret := _m.Called(ctx, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetVehiclesForHost")
	}

	var r0 vehicle.PaginatedVehicleOverview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (vehicle.PaginatedVehicleOverview, error)); ok {
		return rf(ctx, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) vehicle.PaginatedVehicleOverview); ok {
		r0 = rf(ctx, page, limit)
	} else {
		r0 = ret.Get(0).(vehicle.PaginatedVehicleOverview)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SoftDeleteVehicle provides a mock function with given fields: ctx, vehicleId
func (_m *Service) SoftDeleteVehicle(ctx context.Context, vehicleId int) error {
	ret := _m.Called(ctx, vehicleId)

	if len(ret) == 0 {
		panic("no return value specified for SoftDeleteVehicle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, vehicleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVehicle provides a mock function with given fields: ctx, vehicleData, vehicleId
func (_m *Service) UpdateVehicle(ctx context.Context, vehicleData vehicle.VehicleRequestBody, vehicleId int) (vehicle.Vehicle, error) {
	ret := _m.Called(ctx, vehicleData, vehicleId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVehicle")
	}

	var r0 vehicle.Vehicle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, vehicle.VehicleRequestBody, int) (vehicle.Vehicle, error)); ok {
		return rf(ctx, vehicleData, vehicleId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, vehicle.VehicleRequestBody, int) vehicle.Vehicle); ok {
		r0 = rf(ctx, vehicleData, vehicleId)
	} else {
		r0 = ret.Get(0).(vehicle.Vehicle)
	}

	if rf, ok := ret.Get(1).(func(context.Context, vehicle.VehicleRequestBody, int) error); ok {
		r1 = rf(ctx, vehicleData, vehicleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
