// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/adityapadekar-josh/Wheelio-Backend.git/internal/repository"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	time "time"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// BeginTx provides a mock function with given fields: ctx
func (_m *UserRepository) BeginTx(ctx context.Context) (*sql.Tx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*sql.Tx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *sql.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommitTx provides a mock function with given fields: tx
func (_m *UserRepository) CommitTx(tx *sql.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for CommitTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, tx, userData
func (_m *UserRepository) CreateUser(ctx context.Context, tx *sql.Tx, userData repository.CreateUserRequestBody) (repository.User, error) {
	ret := _m.Called(ctx, tx, userData)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 repository.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, repository.CreateUserRequestBody) (repository.User, error)); ok {
		return rf(ctx, tx, userData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, repository.CreateUserRequestBody) repository.User); ok {
		r0 = rf(ctx, tx, userData)
	} else {
		r0 = ret.Get(0).(repository.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, repository.CreateUserRequestBody) error); ok {
		r1 = rf(ctx, tx, userData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVerificationToken provides a mock function with given fields: ctx, tx, userId, token, tokenType, expiresAt
func (_m *UserRepository) CreateVerificationToken(ctx context.Context, tx *sql.Tx, userId int, token string, tokenType string, expiresAt time.Time) (repository.VerificationToken, error) {
	ret := _m.Called(ctx, tx, userId, token, tokenType, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for CreateVerificationToken")
	}

	var r0 repository.VerificationToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int, string, string, time.Time) (repository.VerificationToken, error)); ok {
		return rf(ctx, tx, userId, token, tokenType, expiresAt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int, string, string, time.Time) repository.VerificationToken); ok {
		r0 = rf(ctx, tx, userId, token, tokenType, expiresAt)
	} else {
		r0 = ret.Get(0).(repository.VerificationToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, int, string, string, time.Time) error); ok {
		r1 = rf(ctx, tx, userId, token, tokenType, expiresAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVerificationTokenById provides a mock function with given fields: ctx, tx, tokenId
func (_m *UserRepository) DeleteVerificationTokenById(ctx context.Context, tx *sql.Tx, tokenId int) error {
	ret := _m.Called(ctx, tx, tokenId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVerificationTokenById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) error); ok {
		r0 = rf(ctx, tx, tokenId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByEmail provides a mock function with given fields: ctx, tx, email
func (_m *UserRepository) GetUserByEmail(ctx context.Context, tx *sql.Tx, email string) (repository.User, error) {
	ret := _m.Called(ctx, tx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 repository.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) (repository.User, error)); ok {
		return rf(ctx, tx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) repository.User); ok {
		r0 = rf(ctx, tx, email)
	} else {
		r0 = ret.Get(0).(repository.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, string) error); ok {
		r1 = rf(ctx, tx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: ctx, tx, userId
func (_m *UserRepository) GetUserById(ctx context.Context, tx *sql.Tx, userId int) (repository.User, error) {
	ret := _m.Called(ctx, tx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 repository.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) (repository.User, error)); ok {
		return rf(ctx, tx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) repository.User); ok {
		r0 = rf(ctx, tx, userId)
	} else {
		r0 = ret.Get(0).(repository.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, int) error); ok {
		r1 = rf(ctx, tx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVerificationTokenByToken provides a mock function with given fields: ctx, tx, token
func (_m *UserRepository) GetVerificationTokenByToken(ctx context.Context, tx *sql.Tx, token string) (repository.VerificationToken, error) {
	ret := _m.Called(ctx, tx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetVerificationTokenByToken")
	}

	var r0 repository.VerificationToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) (repository.VerificationToken, error)); ok {
		return rf(ctx, tx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) repository.VerificationToken); ok {
		r0 = rf(ctx, tx, token)
	} else {
		r0 = ret.Get(0).(repository.VerificationToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, string) error); ok {
		r1 = rf(ctx, tx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleTransaction provides a mock function with given fields: ctx, tx, incomingErr
func (_m *UserRepository) HandleTransaction(ctx context.Context, tx *sql.Tx, incomingErr error) error {
	ret := _m.Called(ctx, tx, incomingErr)

	if len(ret) == 0 {
		panic("no return value specified for HandleTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, error) error); ok {
		r0 = rf(ctx, tx, incomingErr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RollbackTx provides a mock function with given fields: tx
func (_m *UserRepository) RollbackTx(tx *sql.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for RollbackTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserEmailVerifiedStatus provides a mock function with given fields: ctx, tx, userId
func (_m *UserRepository) UpdateUserEmailVerifiedStatus(ctx context.Context, tx *sql.Tx, userId int) error {
	ret := _m.Called(ctx, tx, userId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserEmailVerifiedStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) error); ok {
		r0 = rf(ctx, tx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserPassword provides a mock function with given fields: ctx, tx, userId, password
func (_m *UserRepository) UpdateUserPassword(ctx context.Context, tx *sql.Tx, userId int, password string) error {
	ret := _m.Called(ctx, tx, userId, password)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int, string) error); ok {
		r0 = rf(ctx, tx, userId, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserRole provides a mock function with given fields: ctx, tx, userId, role
func (_m *UserRepository) UpdateUserRole(ctx context.Context, tx *sql.Tx, userId int, role string) error {
	ret := _m.Called(ctx, tx, userId, role)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int, string) error); ok {
		r0 = rf(ctx, tx, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
