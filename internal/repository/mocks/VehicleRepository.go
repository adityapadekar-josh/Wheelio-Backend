// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/adityapadekar-josh/Wheelio-Backend.git/internal/repository"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// VehicleRepository is an autogenerated mock type for the VehicleRepository type
type VehicleRepository struct {
	mock.Mock
}

// BeginTx provides a mock function with given fields: ctx
func (_m *VehicleRepository) BeginTx(ctx context.Context) (*sql.Tx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*sql.Tx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *sql.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommitTx provides a mock function with given fields: tx
func (_m *VehicleRepository) CommitTx(tx *sql.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for CommitTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateVehicle provides a mock function with given fields: ctx, tx, vehicleData
func (_m *VehicleRepository) CreateVehicle(ctx context.Context, tx *sql.Tx, vehicleData repository.CreateVehicleRequestBody) (repository.Vehicle, error) {
	ret := _m.Called(ctx, tx, vehicleData)

	if len(ret) == 0 {
		panic("no return value specified for CreateVehicle")
	}

	var r0 repository.Vehicle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, repository.CreateVehicleRequestBody) (repository.Vehicle, error)); ok {
		return rf(ctx, tx, vehicleData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, repository.CreateVehicleRequestBody) repository.Vehicle); ok {
		r0 = rf(ctx, tx, vehicleData)
	} else {
		r0 = ret.Get(0).(repository.Vehicle)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, repository.CreateVehicleRequestBody) error); ok {
		r1 = rf(ctx, tx, vehicleData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVehicleImage provides a mock function with given fields: ctx, tx, vehicleImageData
func (_m *VehicleRepository) CreateVehicleImage(ctx context.Context, tx *sql.Tx, vehicleImageData repository.CreateVehicleImageData) (repository.VehicleImage, error) {
	ret := _m.Called(ctx, tx, vehicleImageData)

	if len(ret) == 0 {
		panic("no return value specified for CreateVehicleImage")
	}

	var r0 repository.VehicleImage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, repository.CreateVehicleImageData) (repository.VehicleImage, error)); ok {
		return rf(ctx, tx, vehicleImageData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, repository.CreateVehicleImageData) repository.VehicleImage); ok {
		r0 = rf(ctx, tx, vehicleImageData)
	} else {
		r0 = ret.Get(0).(repository.VehicleImage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, repository.CreateVehicleImageData) error); ok {
		r1 = rf(ctx, tx, vehicleImageData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAllImagesForVehicle provides a mock function with given fields: ctx, tx, vehicleId
func (_m *VehicleRepository) DeleteAllImagesForVehicle(ctx context.Context, tx *sql.Tx, vehicleId int) error {
	ret := _m.Called(ctx, tx, vehicleId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllImagesForVehicle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) error); ok {
		r0 = rf(ctx, tx, vehicleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetVehicleById provides a mock function with given fields: ctx, tx, vehicleId
func (_m *VehicleRepository) GetVehicleById(ctx context.Context, tx *sql.Tx, vehicleId int) (repository.Vehicle, error) {
	ret := _m.Called(ctx, tx, vehicleId)

	if len(ret) == 0 {
		panic("no return value specified for GetVehicleById")
	}

	var r0 repository.Vehicle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) (repository.Vehicle, error)); ok {
		return rf(ctx, tx, vehicleId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) repository.Vehicle); ok {
		r0 = rf(ctx, tx, vehicleId)
	} else {
		r0 = ret.Get(0).(repository.Vehicle)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, int) error); ok {
		r1 = rf(ctx, tx, vehicleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVehicleImagesByVehicleId provides a mock function with given fields: ctx, tx, vehicleId
func (_m *VehicleRepository) GetVehicleImagesByVehicleId(ctx context.Context, tx *sql.Tx, vehicleId int) ([]repository.VehicleImage, error) {
	ret := _m.Called(ctx, tx, vehicleId)

	if len(ret) == 0 {
		panic("no return value specified for GetVehicleImagesByVehicleId")
	}

	var r0 []repository.VehicleImage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) ([]repository.VehicleImage, error)); ok {
		return rf(ctx, tx, vehicleId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) []repository.VehicleImage); ok {
		r0 = rf(ctx, tx, vehicleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.VehicleImage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, int) error); ok {
		r1 = rf(ctx, tx, vehicleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVehicles provides a mock function with given fields: ctx, tx, params
func (_m *VehicleRepository) GetVehicles(ctx context.Context, tx *sql.Tx, params repository.GetVehiclesParams) ([]repository.VehicleOverview, int, error) {
	ret := _m.Called(ctx, tx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetVehicles")
	}

	var r0 []repository.VehicleOverview
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, repository.GetVehiclesParams) ([]repository.VehicleOverview, int, error)); ok {
		return rf(ctx, tx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, repository.GetVehiclesParams) []repository.VehicleOverview); ok {
		r0 = rf(ctx, tx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.VehicleOverview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, repository.GetVehiclesParams) int); ok {
		r1 = rf(ctx, tx, params)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *sql.Tx, repository.GetVehiclesParams) error); ok {
		r2 = rf(ctx, tx, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetVehiclesForHost provides a mock function with given fields: ctx, tx, params
func (_m *VehicleRepository) GetVehiclesForHost(ctx context.Context, tx *sql.Tx, params repository.GetVehiclesForHostParams) ([]repository.VehicleOverview, int, error) {
	ret := _m.Called(ctx, tx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetVehiclesForHost")
	}

	var r0 []repository.VehicleOverview
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, repository.GetVehiclesForHostParams) ([]repository.VehicleOverview, int, error)); ok {
		return rf(ctx, tx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, repository.GetVehiclesForHostParams) []repository.VehicleOverview); ok {
		r0 = rf(ctx, tx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.VehicleOverview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, repository.GetVehiclesForHostParams) int); ok {
		r1 = rf(ctx, tx, params)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *sql.Tx, repository.GetVehiclesForHostParams) error); ok {
		r2 = rf(ctx, tx, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// HandleTransaction provides a mock function with given fields: ctx, tx, incomingErr
func (_m *VehicleRepository) HandleTransaction(ctx context.Context, tx *sql.Tx, incomingErr error) error {
	ret := _m.Called(ctx, tx, incomingErr)

	if len(ret) == 0 {
		panic("no return value specified for HandleTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, error) error); ok {
		r0 = rf(ctx, tx, incomingErr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RollbackTx provides a mock function with given fields: tx
func (_m *VehicleRepository) RollbackTx(tx *sql.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for RollbackTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SoftDeleteVehicle provides a mock function with given fields: ctx, tx, vehicleId
func (_m *VehicleRepository) SoftDeleteVehicle(ctx context.Context, tx *sql.Tx, vehicleId int) error {
	ret := _m.Called(ctx, tx, vehicleId)

	if len(ret) == 0 {
		panic("no return value specified for SoftDeleteVehicle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) error); ok {
		r0 = rf(ctx, tx, vehicleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateVehicle provides a mock function with given fields: ctx, tx, vehicleData
func (_m *VehicleRepository) UpdateVehicle(ctx context.Context, tx *sql.Tx, vehicleData repository.EditVehicleRequestBody) (repository.Vehicle, error) {
	ret := _m.Called(ctx, tx, vehicleData)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVehicle")
	}

	var r0 repository.Vehicle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, repository.EditVehicleRequestBody) (repository.Vehicle, error)); ok {
		return rf(ctx, tx, vehicleData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, repository.EditVehicleRequestBody) repository.Vehicle); ok {
		r0 = rf(ctx, tx, vehicleData)
	} else {
		r0 = ret.Get(0).(repository.Vehicle)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, repository.EditVehicleRequestBody) error); ok {
		r1 = rf(ctx, tx, vehicleData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewVehicleRepository creates a new instance of VehicleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVehicleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *VehicleRepository {
	mock := &VehicleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
