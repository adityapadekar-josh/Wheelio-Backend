// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/adityapadekar-josh/Wheelio-Backend.git/internal/repository"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	time "time"
)

// BookingRepository is an autogenerated mock type for the BookingRepository type
type BookingRepository struct {
	mock.Mock
}

// BeginTx provides a mock function with given fields: ctx
func (_m *BookingRepository) BeginTx(ctx context.Context) (*sql.Tx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*sql.Tx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *sql.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommitTx provides a mock function with given fields: tx
func (_m *BookingRepository) CommitTx(tx *sql.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for CommitTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBooking provides a mock function with given fields: ctx, tx, bookingData
func (_m *BookingRepository) CreateBooking(ctx context.Context, tx *sql.Tx, bookingData repository.CreateBookingRequestBody) (repository.Booking, error) {
	ret := _m.Called(ctx, tx, bookingData)

	if len(ret) == 0 {
		panic("no return value specified for CreateBooking")
	}

	var r0 repository.Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, repository.CreateBookingRequestBody) (repository.Booking, error)); ok {
		return rf(ctx, tx, bookingData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, repository.CreateBookingRequestBody) repository.Booking); ok {
		r0 = rf(ctx, tx, bookingData)
	} else {
		r0 = ret.Get(0).(repository.Booking)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, repository.CreateBookingRequestBody) error); ok {
		r1 = rf(ctx, tx, bookingData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInvoice provides a mock function with given fields: ctx, tx, invoiceData
func (_m *BookingRepository) CreateInvoice(ctx context.Context, tx *sql.Tx, invoiceData repository.Invoice) (repository.Invoice, error) {
	ret := _m.Called(ctx, tx, invoiceData)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvoice")
	}

	var r0 repository.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, repository.Invoice) (repository.Invoice, error)); ok {
		return rf(ctx, tx, invoiceData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, repository.Invoice) repository.Invoice); ok {
		r0 = rf(ctx, tx, invoiceData)
	} else {
		r0 = ret.Get(0).(repository.Invoice)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, repository.Invoice) error); ok {
		r1 = rf(ctx, tx, invoiceData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOtpToken provides a mock function with given fields: ctx, tx, tokenData
func (_m *BookingRepository) CreateOtpToken(ctx context.Context, tx *sql.Tx, tokenData repository.OtpToken) error {
	ret := _m.Called(ctx, tx, tokenData)

	if len(ret) == 0 {
		panic("no return value specified for CreateOtpToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, repository.OtpToken) error); ok {
		r0 = rf(ctx, tx, tokenData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOtpTokenById provides a mock function with given fields: ctx, tx, otpTokenId
func (_m *BookingRepository) DeleteOtpTokenById(ctx context.Context, tx *sql.Tx, otpTokenId int) error {
	ret := _m.Called(ctx, tx, otpTokenId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOtpTokenById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) error); ok {
		r0 = rf(ctx, tx, otpTokenId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBookingById provides a mock function with given fields: ctx, tx, bookingId
func (_m *BookingRepository) GetBookingById(ctx context.Context, tx *sql.Tx, bookingId int) (repository.Booking, error) {
	ret := _m.Called(ctx, tx, bookingId)

	if len(ret) == 0 {
		panic("no return value specified for GetBookingById")
	}

	var r0 repository.Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) (repository.Booking, error)); ok {
		return rf(ctx, tx, bookingId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) repository.Booking); ok {
		r0 = rf(ctx, tx, bookingId)
	} else {
		r0 = ret.Get(0).(repository.Booking)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, int) error); ok {
		r1 = rf(ctx, tx, bookingId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookingDetailsById provides a mock function with given fields: ctx, tx, bookingId
func (_m *BookingRepository) GetBookingDetailsById(ctx context.Context, tx *sql.Tx, bookingId int) (repository.BookingDetails, error) {
	ret := _m.Called(ctx, tx, bookingId)

	if len(ret) == 0 {
		panic("no return value specified for GetBookingDetailsById")
	}

	var r0 repository.BookingDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) (repository.BookingDetails, error)); ok {
		return rf(ctx, tx, bookingId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) repository.BookingDetails); ok {
		r0 = rf(ctx, tx, bookingId)
	} else {
		r0 = ret.Get(0).(repository.BookingDetails)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, int) error); ok {
		r1 = rf(ctx, tx, bookingId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostBookings provides a mock function with given fields: ctx, tx, params
func (_m *BookingRepository) GetHostBookings(ctx context.Context, tx *sql.Tx, params repository.GetHostBookingsParams) ([]repository.BookingData, int, error) {
	ret := _m.Called(ctx, tx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetHostBookings")
	}

	var r0 []repository.BookingData
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, repository.GetHostBookingsParams) ([]repository.BookingData, int, error)); ok {
		return rf(ctx, tx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, repository.GetHostBookingsParams) []repository.BookingData); ok {
		r0 = rf(ctx, tx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.BookingData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, repository.GetHostBookingsParams) int); ok {
		r1 = rf(ctx, tx, params)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *sql.Tx, repository.GetHostBookingsParams) error); ok {
		r2 = rf(ctx, tx, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOtpToken provides a mock function with given fields: ctx, tx, otp
func (_m *BookingRepository) GetOtpToken(ctx context.Context, tx *sql.Tx, otp string) (repository.OtpToken, error) {
	ret := _m.Called(ctx, tx, otp)

	if len(ret) == 0 {
		panic("no return value specified for GetOtpToken")
	}

	var r0 repository.OtpToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) (repository.OtpToken, error)); ok {
		return rf(ctx, tx, otp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) repository.OtpToken); ok {
		r0 = rf(ctx, tx, otp)
	} else {
		r0 = ret.Get(0).(repository.OtpToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, string) error); ok {
		r1 = rf(ctx, tx, otp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSeekerBookings provides a mock function with given fields: ctx, tx, params
func (_m *BookingRepository) GetSeekerBookings(ctx context.Context, tx *sql.Tx, params repository.GetSeekerBookingsParams) ([]repository.BookingData, int, error) {
	ret := _m.Called(ctx, tx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetSeekerBookings")
	}

	var r0 []repository.BookingData
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, repository.GetSeekerBookingsParams) ([]repository.BookingData, int, error)); ok {
		return rf(ctx, tx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, repository.GetSeekerBookingsParams) []repository.BookingData); ok {
		r0 = rf(ctx, tx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.BookingData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, repository.GetSeekerBookingsParams) int); ok {
		r1 = rf(ctx, tx, params)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *sql.Tx, repository.GetSeekerBookingsParams) error); ok {
		r2 = rf(ctx, tx, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// HandleTransaction provides a mock function with given fields: ctx, tx, incomingErr
func (_m *BookingRepository) HandleTransaction(ctx context.Context, tx *sql.Tx, incomingErr error) error {
	ret := _m.Called(ctx, tx, incomingErr)

	if len(ret) == 0 {
		panic("no return value specified for HandleTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, error) error); ok {
		r0 = rf(ctx, tx, incomingErr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RollbackTx provides a mock function with given fields: tx
func (_m *BookingRepository) RollbackTx(tx *sql.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for RollbackTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateActualDropoffTime provides a mock function with given fields: ctx, tx, bookingId
func (_m *BookingRepository) UpdateActualDropoffTime(ctx context.Context, tx *sql.Tx, bookingId int) error {
	ret := _m.Called(ctx, tx, bookingId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateActualDropoffTime")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) error); ok {
		r0 = rf(ctx, tx, bookingId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateActualPickupTime provides a mock function with given fields: ctx, tx, bookingId
func (_m *BookingRepository) UpdateActualPickupTime(ctx context.Context, tx *sql.Tx, bookingId int) error {
	ret := _m.Called(ctx, tx, bookingId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateActualPickupTime")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) error); ok {
		r0 = rf(ctx, tx, bookingId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBookingStatus provides a mock function with given fields: ctx, tx, bookingId, status
func (_m *BookingRepository) UpdateBookingStatus(ctx context.Context, tx *sql.Tx, bookingId int, status string) error {
	ret := _m.Called(ctx, tx, bookingId, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBookingStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int, string) error); ok {
		r0 = rf(ctx, tx, bookingId, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VehicleBookingConflictCheck provides a mock function with given fields: ctx, tx, vehicleId, scheduledPickupTimestamp, scheduledDropoffTimestamp
func (_m *BookingRepository) VehicleBookingConflictCheck(ctx context.Context, tx *sql.Tx, vehicleId int, scheduledPickupTimestamp time.Time, scheduledDropoffTimestamp time.Time) error {
	ret := _m.Called(ctx, tx, vehicleId, scheduledPickupTimestamp, scheduledDropoffTimestamp)

	if len(ret) == 0 {
		panic("no return value specified for VehicleBookingConflictCheck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int, time.Time, time.Time) error); ok {
		r0 = rf(ctx, tx, vehicleId, scheduledPickupTimestamp, scheduledDropoffTimestamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBookingRepository creates a new instance of BookingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookingRepository {
	mock := &BookingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
